const SlackApiCall = require('../services/slack_api_calls');
const User = require('../models/Users');
const keys = require('../config/keys')
const addUserToSlack = async (req, res)=>{

    try{
        var code = req.query.code;
    
        //get token from the code
     
        let token_obj= await SlackApiCall.getToken(code)
    
        //get user info like email, userid, name, team id and store in user collection
        //do this only if user already does not exist
        let response = await User.findOne({id:token_obj.authed_user.id, team_id:token_obj.team.id})
        console.log("AFTER QUERY ", response);
        if(response){
            console.log("USER EXISTS")
            return res.status(301).redirect(`https://desolate-bayou-39962.herokuapp.com/onboarding?user_id=${response.id}&team_id=${response.team_id}`)
        }
        //user does not exist create new one
        let user_info = await SlackApiCall.getUserinfo(token_obj.authed_user.access_token);
        const newUser = new User({
            id:user_info.user.id,
            name:user_info.user.name,
            email:user_info.user.email,
            team_id:user_info.team.id,
            bot_token: token_obj.access_token,
            user_token : token_obj.authed_user.access_token,
            workspace_name : token_obj.team.name
        });

        newUser.save();
        //open conversation with bot
        let conversation = await SlackApiCall.openConversation({token:newUser.bot_token , users: newUser.id })
        //send message in slack
        const replyObj = {
            token : newUser.bot_token,
            channel : conversation.channel.id,
            attachments : [{"pretext": "*Install successful!*",
             "text": "Go to Webapp and track all weather reports generated by you in slack\nUse _/w configure_ to set default city for weather\nUse _/w_ to get weather report of default city\n Use _/w <city>_ for any other city"}] ,
            blocks : [
                {
                    "type": "divider"
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": ":smile: *Welcome to Weather Master*"
                    }
                },
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "text": "Go to Webapp",
                                "emoji": true
                            },
                            "value": "click_me_123",
                            "url": "https://desolate-bayou-39962.herokuapp.com",
                            "action_id": "goto-web"
                        }
                    ]
                }
            ],
            user : newUser.id
        }
        SlackApiCall.sendMessage(replyObj, newUser)
        res.status(301).redirect(`https://desolate-bayou-39962.herokuapp.com/onboarding?user_id=${newUser.id}&team_id=${newUser.team_id}`)

    
    }catch(e){
        console.log(e);
    }
    
}
exports.addUserToSlack = addUserToSlack;

const uninstall = async (req, res)=>{
    //get token of the user who is asking for ininstall
    let id = req.query.user_id;
    let team_id = req.query.team_id;
    let user = await User.findOne({id , team_id});
    //uninstall app if user exists
    if(user){
        const data ={
            token :user.bot_token,
            client_id : keys.client_id,
            client_secret : keys.client_secret
        }
        console.log(data);
        let response = await SlackApiCall.uninstallApp(data);
        console.log(response);
        if(response.ok && response.uninstalled){
            //delete data user from dattabase
           let deleted = await user.delete();
            console.log(deleted);
            if(deleted){
                res.json({success:true})
            }else{
                res.json({success:false})
            }
        }else{
            res.json({success:false})
        }
    }else{
        res.json({success:false})
    }
    

}
exports.uninstall = uninstall;


// TOKEN_OBJ : {
//     2021-04-02T07:13:12.795941+00:00 app[web.1]: ok: true,
//     2021-04-02T07:13:12.795942+00:00 app[web.1]: app_id: 'A01T42L5L5S',
//     2021-04-02T07:13:12.795943+00:00 app[web.1]: authed_user: {
//     2021-04-02T07:13:12.795943+00:00 app[web.1]: id: 'U01PUMXSKA8',
//     2021-04-02T07:13:12.795944+00:00 app[web.1]: scope: 'identity.basic,identity.email,identity.team',
//     2021-04-02T07:13:12.795945+00:00 app[web.1]: access_token: 'xoxp-1797802762086-1810745903348-1946864763200-be43a8f3697b44d2f70a18849f096bf7',      
//     2021-04-02T07:13:12.795945+00:00 app[web.1]: token_type: 'user'
//     2021-04-02T07:13:12.795945+00:00 app[web.1]: },
//     2021-04-02T07:13:12.795946+00:00 app[web.1]: scope: 'channels:history,chat:write,commands',
//     2021-04-02T07:13:12.795946+00:00 app[web.1]: token_type: 'bot',
//     2021-04-02T07:13:12.795947+00:00 app[web.1]: access_token: 'xoxb-1797802762086-1923275216691-JADzaaGFZypfQw4YW1Oynw9D',
//     2021-04-02T07:13:12.795947+00:00 app[web.1]: bot_user_id: 'U01T5836CLB',
//     2021-04-02T07:13:12.795948+00:00 app[web.1]: team: { id: 'T01PFPLNE2J', name: 'Troopr' },
//     2021-04-02T07:13:12.795948+00:00 app[web.1]: enterprise: null,
//     2021-04-02T07:13:12.795949+00:00 app[web.1]: is_enterprise_install: false
//     2021-04-02T07:13:12.795949+00:00 app[web.1]: }




//     REQ QRY:   {
//         2021-04-02T07:13:11.437511+00:00 app[web.1]: code: '1797802762086.1935678192337.5649712f28f69d70cae1cef6cffaefc99324a7d389fe2e97ef9b45f14261677a', 
//         2021-04-02T07:13:11.437512+00:00 app[web.1]: state: ''
//         2021-04-02T07:13:11.437512+00:00 app[web.1]: }

// USER INFO {
//     2021-04-02T08:07:02.480171+00:00 app[web.1]: ok: true,
//     2021-04-02T08:07:02.480175+00:00 app[web.1]: user: { name: 'upendra', id: 'U01PUMXSKA8', email: 'Upendra@troopr.io' },
//     2021-04-02T08:07:02.480175+00:00 app[web.1]: team: {
//     2021-04-02T08:07:02.480176+00:00 app[web.1]: id: 'T01PFPLNE2J',
//     2021-04-02T08:07:02.480176+00:00 app[web.1]: name: 'Troopr',
//     2021-04-02T08:07:02.480177+00:00 app[web.1]: domain: 'teamtroopr',
//     2021-04-02T08:07:02.480178+00:00 app[web.1]: image_34: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-34.png',
//     2021-04-02T08:07:02.480178+00:00 app[web.1]: image_44: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-44.png',
//     2021-04-02T08:07:02.480179+00:00 app[web.1]: image_68: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-68.png',
//     2021-04-02T08:07:02.480179+00:00 app[web.1]: image_88: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-88.png',
//     2021-04-02T08:07:02.480180+00:00 app[web.1]: image_102: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-102.png',
//     2021-04-02T08:07:02.480180+00:00 app[web.1]: image_132: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-132.png',
//     2021-04-02T08:07:02.480180+00:00 app[web.1]: image_230: 'https://a.slack-edge.com/80588/img/avatars-teams/ava_0011-230.png',
//     2021-04-02T08:07:02.480181+00:00 app[web.1]: image_default: true
//     2021-04-02T08:07:02.480181+00:00 app[web.1]: },
//     2021-04-02T08:07:02.480181+00:00 app[web.1]: response_metadata: {
//     2021-04-02T08:07:02.480182+00:00 app[web.1]: scopes: [ 'identity.basic', 'identity.email', 'identity.team' ],
//     2021-04-02T08:07:02.480182+00:00 app[web.1]: acceptedScopes: [ 'identity.basic' ]
//     2021-04-02T08:07:02.480183+00:00 app[web.1]: }
//     2021-04-02T08:07:02.480183+00:00 app[web.1]: }